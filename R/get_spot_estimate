#!/usr/bin/env Rscript

if (!suppressPackageStartupMessages(require(argparse)))
  install.packages("argparse")
suppressPackageStartupMessages(library(argparse))

parser <- ArgumentParser()
parser$add_argument("--gpu", action='store_true',
                    help="Estimate cost for gpu instances")
parser$add_argument("--total", action='store_true',
                    help=paste("Display only the total cost for the cheapest",
                    "configuration."))
parser$add_argument("--hours",  nargs='?', default='0', type="integer",
                    help="Number of vcpu hours", required=TRUE)
parser$add_argument("--num", nargs='?', default='1', type="integer",
                    help="Number of jobs", required=TRUE)

args <- parser$parse_args()

total.only = args$total

# Define AWS regions
regions <- c("us-east-1", "us-west-2", "us-west-1" , "eu-west-1", "eu-central-1",
           "ap-southeast-1", "ap-northeast-1", "ap-southeast-2",
           "ap-northeast-2", "ap-south-1", "sa-east-1")

# Price out cheapest GPUs if flag is given
gpus=args$gpu

totalhours <- args$hours
num <- args$num

# Download AWS pricing to obtain vcpu list
cat("\n   Now downloading pricing list from AWS...\n\n")
tmpfile=tempfile()
download.file(paste0("https://pricing.us-east-1.amazonaws.com/offers/v1.0/",
                      "aws/AmazonEC2/current/index.csv"),
              destfile=tmpfile, method="wget", quiet=total.only)
cat("   Please allow 4-5 minutes for this script to run.")

# Drop first five rows
priceinfo <- read.csv(tmpfile,skip=5)

if (!gpus) {
    priceinfo <- data.frame(priceinfo$Instance.Type, priceinfo$vCPU)
    colnames(priceinfo) <- c("instancetype", "vcpu")
    vcpus <- aggregate(priceinfo$vcpu, by=list(priceinfo$instancetype),
                       FUN=mean)
    colnames(vcpus) <- c("instancetype", "vcpu")
} else {
    # if we are looking at gpus, we need the count of GPUs and not the vcpus
    priceinfo <- data.frame(priceinfo$Instance.Type, priceinfo$GPU)
    colnames(priceinfo) <- c("instancetype", "vcpu")
    vcpus <- aggregate(priceinfo$vcpu, by=list(priceinfo$instancetype),
      FUN=mean)
    colnames(vcpus) <- c("instancetype", "vcpu")
}

# Obtain all M4 and C4 instances
x <- data.frame(do.call(rbind, strsplit(levels(vcpus$instancetype), "\\.")))
if (!gpus) {
    x.subset <- subset(x,(X1=="m4"|X1=="c4") & levels(X1)[X1] != levels(X2)[X2])
    instances <- paste(x.subset$X1, x.subset$X2, sep=".")
} else {
    x.subset <- subset(x,(X1=="g2") & levels(X1)[X1] != levels(X2)[X2])
    instances <- paste(x.subset$X1, x.subset$X2, sep=".")
}

# Get spot price history using instances identified
spotpricingtmpfile=tempfile()
endtime <- Sys.time()
# Subtract 7 days
starttime <- Sys.time() - 7*60*60*24
for (region in regions) {
    command <- paste0("aws --region ",
                     region,
                     " --output text ec2 describe-spot-price-history ",
                     " --instance-types ",
                     paste(instances, collapse=" "), " --start-time '",
                     starttime, "' --end-time '", endtime, "' ",
                     "--product-descriptions Linux/UNIX >> ",
                     spotpricingtmpfile)
    system(command)
}

dat <-read.table(spotpricingtmpfile)
dat <- data.frame(dat$V2, dat$V3, dat$V5)
colnames(dat) <- c("region", "instancetype", "price")
tab <- aggregate(dat$price, by=list(dat$region, dat$instancetype), FUN=mean)
colnames(tab) <- c("region", "instancetype", "price")

# Merge vcpu with spot pricing
merged <- merge(tab, vcpus, by="instancetype")
merged$ninstances <- ceiling(num / merged$vcpu)
merged$hours <- totalhours
merged$totalprice <- merged$price * merged$ninstances * merged$hours

minimum <- which.min(merged$totalprice)
minimum.instancetype <- levels(merged$instancetype)[
  merged[minimum, ]$instancetype]

maximum <- which.max(merged$totalprice)
maximum.instancetype <- levels(merged$instancetype)[
  merged[maximum, ]$instancetype]

if (!total.only) {
  cat("\nHere are the results:")
  cat("\nMinimum cost per instance will be EC2 instance-type", minimum.instancetype,
     "at price $", merged$price[minimum], "/hr\n")
}
if (totalhours > 0 && !total.only)  {
  cat("\nMinimum total cost estimate is $", merged$totalprice[minimum],
      "(for", merged$ninstances[minimum], "instances)\n")
}
if (total.only) {
  cat(merged$totalprice[minimum], fill=TRUE)
}

# Clean up
unlink(spotpricingtmpfile)
unlink(tmpfile)
