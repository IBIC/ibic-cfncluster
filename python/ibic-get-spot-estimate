#!/usr/bin/env python

# Do float division by default.
# from __future__ imports must be first
from __future__ import division, print_function


# Import libraries

import argparse
import boto3
import numpy as np
import sys
import math
import re
import os

# import time functions
from datetime import datetime, date, time, timedelta

# Get lib directory from environment, or exit if it isn't set
if os.getenv("IBICCFNCLUSTERHOME") is None:
    print("Error: Environment variable IBICCFNCLUSTERHOME is not set. See the" +
            "readme for instructions on how to set it.")
    sys.exit(1)
else:
    # Set the lib to be the environment variable.
    LIB=os.getenv("IBICCFNCLUSTERHOME") + "/lib"

    # Make sure instance concurrency file exists before going any farther.
    if not os.path.isfile(LIB + "/instance_concurrency"):
        print("instance_concurrency file does not exist in library specified" +
            "(" + LIB + "). Please reset IBICCFNCLUSTERLIB if necessary.")
        sys.exit(1)

# All non-gpu instance types we search
instances = ["m4.large", "m4.xlarge", "c4.xlarge", "c4.8xlarge",
                 "m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge",
                    "m4.10xlarge",
                 "c4.large", "c4.xlarge","c4.2xlarge","c4.4xlarge",
                     "c4.8xlarge" ]

# GPU instances available
gpu_instances = ["g2.2xlarge", "g2.8xlarge"]

# Regions to search
regions = ["us-east-1", "us-west-2", "us-west-1" , "eu-west-1", "eu-central-1",
           "ap-southeast-1", "ap-northeast-1", "ap-southeast-2",
           "ap-northeast-2", "ap-south-1", "sa-east-1"]

# us-e1 N.Virginia; us-w2 Oregon; us-w1 N. California; eu-w1 Ireland;
# eu-c1 Frankfurt; ap-se1 Singapore; ap-ne1 tokyo, ap-se2 Sydney, ap-ne2 Seoul;
# ap-s1 Mumbai; sa-e1 Sao Paulo

# For verbose display
header=["inst", "region\t", "total$", "#inst", "hrs", "$/hr", "#cores"]

# Get an object representing five days ago.
five_days = timedelta(5)
now = datetime.now()
five_days_ago = now - five_days

ncpus = {}

# Read instance concurrency file.
with open(LIB + "/instance_concurrency") as f:
    # skip header line (which is included for R)
    next(f)

    # read in data
    for line in f:
       (key, val) = line.split(None)
       ncpus[key] = int(val)

# This gets all the prices for a single region.
def get_all_in_region(region, gpu):
    """Get the price of every instance in a single region."""

    # Select which instances to search. There's no point in doing both,
    ## the GPU instances are too expensive if they aren't used, and the non-GPU
    ## instances are pointless to investigate if it's not a GPU-enabled program.
    if gpu:
        all_instances = gpu_instances
    else:
        all_instances = instances

    # Initiate the boto client in a specific region
    client = boto3.client("ec2", region)
    response = client.describe_spot_price_history(
            InstanceTypes=all_instances,
            StartTime=five_days_ago,
            EndTime=now,
            ProductDescriptions=["Linux/UNIX"],
        )

    prices = np.empty([0, 3])

    for item in response["SpotPriceHistory"]:
        price = float(item["SpotPrice"])

        mat = np.array([[item["InstanceType"], price,
            item["AvailabilityZone"]]])
        prices = np.append(prices, mat, axis=0)

    # This returns a matrix with the columns [instance, $/hr, region]
    return(prices)

# This wraps get_all_in_region() and iterates over all the regions.
def get_all_regions(gpu):
    """Iterate over all given regions."""

    all_prices = np.empty([0, 3])

    for r in regions:
        mat = get_all_in_region(r, gpu)
        all_prices = np.append(all_prices, mat, axis=0)

    # This returns a matrix with the columns [instance, $/hr, region], except
    ## for all regions.
    return(all_prices)

# For a given instance type, calculate the price and stuff of a cluster.
def make_a_cluster(row, num, length):
    """Make a cluster based on how many jobs there are"""

    cores = ncpus[row[0]]
    price = float(row[1])
    machines = int(math.ceil(num / cores)) # Round up so there's enough cores.

    total_cost = machines * length * price

    #return([row[0], row[2], total_cost, machines, length, price, cores])
    return({"inst":row[0], "region":row[2], "total$":total_cost,
        "#inst":machines, "hrs":length, "hour$":price, "#cores": cores})

# Print the information for verbose output
def spaces(this_dict):
    """Print the list spaces for each row.
    It isn"t the prettiest, but it works for debug output"""

    print("\t".join([this_dict["inst"], this_dict["region"],
        str(this_dict["total$"]), str(this_dict["#inst"]),
        str(this_dict["hrs"]), str(this_dict["hour$"]),
        str(this_dict["#cores"])]))

# Compare all clusters
def get_best_cluster(num, length, gpu):
    """Compare all possible clusters to get the cheapest one."""

    every = get_all_regions(gpu=gpu)

    if verbose:
        print("\t".join(header))

    # Start the max price out high.
    maxprice = sys.maxint
    for x in every:

        # Get the cluster
        price = make_a_cluster(x, num, length)

        # If verbose is on, print a summary.
        if verbose:
            spaces(price)

        # If it's cheaper than the last cheapest cluster, save it as best.
        if price["total$"] < maxprice:
            best = price
            maxprice = price["total$"]

    return(best)

# Takes the output of get_bet_cluster() and parses it for the user.
def print_best_cluster(best):
    """Format and display the best cluster."""

    if verbose:
        print("\t".join(header) + "\n")

        for k, v in best.items():
            print(k + "\t" + str(v))

        print("\n")

    print("Here are the results:")
    print("Minimum cost per instance will be EC2 instance-type " + \
        best["inst"] + " in region " + best["region"] + " at price $" + \
        str(best["hour$"]) + "/hr.\n")
    print("Minimum total cost estimate is $" + str(best["total$"]) + " (" + \
        str(best["#inst"]) + " instances).")

## PARSE ARGUMENTS

class MyParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write("error: %s\n" % message)
        self.print_help()
        sys.exit(2)

parser=MyParser(description="Determine the best value for a \
    given program based on execution time.")

# Putting the required flag arguments into their own group stops them from
## showing up under the confusing header "optional argumetnts"
required_named = parser.add_argument_group("required named arguments")

required_named.add_argument("-H", "--hours", type=int, required=True,
    help="Job execution time, on one brain in hours on a neuron-class " + \
    "machine (adrc, tpp, panuc), single-threaded. -H to not conflict with " + \
    "help.")
required_named.add_argument("-n", "--num", type=int, required=True,
    help="How many jobs you have.", default=1)

parser.add_argument("-v", "--verbose", action="store_true",
    help="Be more verbose.")

parser.add_argument("-g", "--gpu", action="store_true",
    help="Don't calculate for GPU instances.")

args = parser.parse_args()

# Make verbosity setting global
verbose = args.verbose

if verbose:
    print(args)

## RUN CODE

# Choose the best cluster
best_cluster = get_best_cluster(args.num,
    args.hours,
    gpu = args.gpu)

# Print that cluster.
print_best_cluster(best_cluster)
